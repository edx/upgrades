# GitHub Workflow only has string type input field available as an argument
# so it is not possible to pass the issue_body as parameter
# In case a different issue body is required than the one hard coded, then
# Update the workflow with the updated issue body description, then
# 1. either merge the workflow and then trigger the workflow
# 2. or use the changed branch when triggering the action instead of main branch


name: Bulk Issue Creater
on:
  workflow_dispatch:
    inputs:
      repos_list:
        description: "List of repositories in the format 'x', 'y', 'z'..."
        type: string
        required: true
      issue_title: 
        description: "Issue title (Repo name will be appended before this title)"
        type: string
        required: true
      issue_assignee:
        description: "Assignee for all the created issues (should've write access to the repo)"
        type: string
        default: ""
      issue_label:
        description: "Label to identify the created issues"
        type: string
        default: "Django 4.2 Upgrade"

jobs:
  repos_list:
    name: Parse repos list
    runs-on: ubuntu-20.04
    outputs:
      output1: ${{ steps.repos_list.outputs.list }}
    steps:
    - name: get repos list
      id: repos_list
      run: |
        echo "::set-output name=list::[${{github.event.inputs.repos_list}}]"

  create_bulk_issues:
    name: Create Bulk Issues
    runs-on: ubuntu-20.04
    needs: [ repos_list ]
    permissions:
      issues: write
    strategy:
      fail-fast: false
      matrix:
        repos: ${{fromJson(needs.repos_list.outputs.output1)}}

    steps:
      - name: Create issue
        uses: imjohnbo/issue-bot@v3
        with:
          labels: "${{ github.event.inputs.issue_label }}"
          title: "[${{ matrix.repos }}]: ${{github.event.inputs.issue_title}}"
          body: |
            ## Description
            If latest PyPI release does not have Django 4.2 support, then 

            - [ ] Verify if latest master/main branch has support for Django 4.2
            - [ ] Create issue in the upstream repo for Django 4.2 upgrade if no issue exists already.
            - [ ] Create pull request in upstream repo for Django 4.2 support if no pull request exists already.
            - [ ] Fork the repo, Add test configurations for Django 4.0, 4.1 and 4.2 in CI
            - [ ] Run available django-code-mods to fix the failing tests
            - [ ] Fix any remaining Django deprecation warnings or test failures in all the test configurations.
            - [ ] Update the Trove classifiers in any setup.py, setup.cfg, or pyproject.toml files
            - [ ] Update status in the Dependency Sheet if the package has support for Django 4.2
            - [ ] Update the repo support field in the Dependency Upgrade Sheet once a new version with support has been released.

        env:
          GITHUB_TOKEN: ${{ secrets.requirements_bot_github_token }}
